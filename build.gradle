import com.github.spotbugs.snom.Effort

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.0.2/userguide/building_java_projects.html
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'
    id 'signing'
    id 'jacoco'
    id 'com.diffplug.spotless' version '6.21.0'
    id 'com.github.spotbugs' version '6.0.0-beta.3'
}

group = 'dev.popaxe.aws.credentials'
version = '0.1.0'
sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()

    // Maven central for actually testing these changes locally
    mavenLocal()
}

java {
    withJavadocJar()
    withSourcesJar()
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl = uri('https://s01.oss.sonatype.org/service/local/')
            snapshotRepositoryUrl = uri('https://s01.oss.sonatype.org/content/repositories/snapshots/')
            username = System.getenv("MAVEN_USERNAME")
            password = System.getenv("MAVEN_PASSWORD")
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = "${group}"
            artifactId = 'vault-aws-credentials-provider'
            version = "${version}"
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }

            pom {
                name = 'VaultAwsCredentialsProvider'
                url = 'https://github.com/PopAxe/VaultAwsCredentialsProvider-Java'
                description = 'A library to provide either refreshable or static credentials to AWS SDK via Vault'
                licenses {
                    license {
                        name = 'GNU Lesser General Public License, Version 3'
                        url = 'https://www.gnu.org/licenses/lgpl-3.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'hunoz'
                        name = 'David Gregory'
                        email = 'hunoz@users.noreply.github.com'
                    }
                }
                scm {
                    connection = 'scm:git:github.com:PopAxe/VaultAwsCredentialsProvider-Java.git'
                    developerConnection = 'scm:git:github.com:PopAxe/VaultAwsCredentialsProvider-Java.git'
                    url = 'https://github.com/PopAxe/VaultAwsCredentialsProvider-Java'
                }
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

dependencies {
    implementation 'software.amazon.awssdk:auth:2.20.141'

    implementation 'org.springframework.vault:spring-vault-core:3.0.4'
    implementation 'io.github.jopenlibs:vault-java-driver:6.1.0'

    testImplementation 'org.mockito:mockito-core:5.5.0'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.1'
}

tasks.withType(Javadoc).configureEach {
    enabled = true
}

spotless {
    java {
        removeUnusedImports()

        googleJavaFormat().aosp().reorderImports(true).reflowLongStrings(true)
    }
}

spotbugsMain {
    enabled = true
    ignoreFailures = false
    effort = Effort.DEFAULT
    reports {
        html {
            required = true
            outputLocation = file("$buildDir/reports/spotbugs/main/spotbugs.html")
        }
    }
}

tasks.named('test', Test) {
    useJUnitPlatform()
    dependsOn spotbugsMain
    dependsOn spotlessCheck
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.9"
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = true
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.95
            }
        }
    }
}

check.dependsOn test
check.dependsOn jacocoTestCoverageVerification

build {
    dependsOn check
}

publish.dependsOn build
